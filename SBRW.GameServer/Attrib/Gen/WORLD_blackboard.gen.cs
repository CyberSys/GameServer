using System.Collections.Generic;
using VaultLib.CodeGen;
using VaultLib.Core.Data;

// Generated by VaultLib.CodeGen @ November 30, 2019 4:47:29 AM for game WORLD
namespace SBRW.GameServer.Attrib.Gen
{
    public class WORLD_blackboard : CollectionWrapperBase {
        #region Field Names
        public const string Name_TrafficEnabled_Remote = "TrafficEnabled_Remote";
        public const string Name_ShowOutOfRangeRemoteOpponents = "ShowOutOfRangeRemoteOpponents";
        public const string Name_Enable_PlayerJoinEvent = "Enable_PlayerJoinEvent";
        public const string Name_MixerFlags = "MixerFlags";
        public const string Name_HeroMusicTrackNicInputTrigger = "HeroMusicTrackNicInputTrigger";
        public const string Name_IgnoreInteractions = "IgnoreInteractions";
        public const string Name_TrackMilestones = "TrackMilestones";
        public const string Name_OnlyPlayOneMusicTrack = "OnlyPlayOneMusicTrack";
        public const string Name_Enable_PlayerTeleport = "Enable_PlayerTeleport";
        public const string Name_KillSafehouseMusic = "KillSafehouseMusic";
        public const string Name_SpeechEventFilterList = "SpeechEventFilterList";
        public const string Name_PursuitNeverEnd = "PursuitNeverEnd";
        public const string Name_MultipleSuspects = "MultipleSuspects";
        public const string Name_CanPlayEAMusic = "CanPlayEAMusic";
        public const string Name_CanPlayReport911 = "CanPlayReport911";
        public const string Name_HasRoute = "HasRoute";
        public const string Name_Enable_PlayerPursuitInitiate = "Enable_PlayerPursuitInitiate";
        public const string Name_MusicPlayerNicInputTrigger = "MusicPlayerNicInputTrigger";
        public const string Name_FEState = "FEState";
        public const string Name_WorldMapStateName = "WorldMapStateName";
        public const string Name_MusicPlayerVolSlot = "MusicPlayerVolSlot";
        public const string Name_MuteAudio = "MuteAudio";
        public const string Name_TargetPathfindingRequired = "TargetPathfindingRequired";
        public const string Name_MinSpeedConsideredStopped = "MinSpeedConsideredStopped";
        public const string Name_MusicFadeTime = "MusicFadeTime";
        public const string Name_TimePlayerStoppedHeroTrackThreshold = "TimePlayerStoppedHeroTrackThreshold";
        public const string Name_IsSpectating = "IsSpectating";
        public const string Name_MinSpeedConsideredNotStopped = "MinSpeedConsideredNotStopped";
        public const string Name_MultiplayerPursuitTimeLimitWarning = "MultiplayerPursuitTimeLimitWarning";
        public const string Name_SafehouseMusic = "SafehouseMusic";
        public const string Name_IsOffline = "IsOffline";
        public const string Name_TrafficEnabled_Local = "TrafficEnabled_Local";
        public const string Name_Enable_PlayerEnterSafehouse = "Enable_PlayerEnterSafehouse";
        public const string Name_RBAlwaysAvailableForSpeech = "RBAlwaysAvailableForSpeech";
        public const string Name_CopsEnabled_Remote = "CopsEnabled_Remote";
        public const string Name_IsDragRaceMode = "IsDragRaceMode";
        public const string Name_CollectionName = "CollectionName";
        public const string Name_HeatLevelOverride = "HeatLevelOverride";
        public const string Name_BlackBoardChannel = "BlackBoardChannel";
        public const string Name_OnlyPlayStartMusicOnce = "OnlyPlayStartMusicOnce";
        public const string Name_Enable_PlayerControl = "Enable_PlayerControl";
        public const string Name_EAMusicList = "EAMusicList";
        public const string Name_HeroMusicTrackVolSlot = "HeroMusicTrackVolSlot";
        public const string Name_CanPlaySirens = "CanPlaySirens";
        public const string Name_MinTimePlayerStoppedHeroTrack = "MinTimePlayerStoppedHeroTrack";
        public const string Name_IsPursuitActive = "IsPursuitActive";
        public const string Name_CopsEnabled_Local = "CopsEnabled_Local";
        public const string Name_FreeroamHeroMusicTrack = "FreeroamHeroMusicTrack";
        public const string Name_MinTimePlayerAtHighSpeed = "MinTimePlayerAtHighSpeed";
        public const string Name_IsRaceMusic = "IsRaceMusic";
        #endregion

        public WORLD_blackboard(VLTCollection collection) : base(collection) {}

        #region Getters
        public VaultLib.Support.World.VLT.GameCore.BlackBoardChannel BlackBoardChannel() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.BlackBoardChannel>("BlackBoardChannel");
        }
        public System.Boolean CanPlayEAMusic() {
            return GetValue<System.Boolean>("CanPlayEAMusic");
        }
        public System.Boolean CanPlayReport911() {
            return GetValue<System.Boolean>("CanPlayReport911");
        }
        public System.Boolean CanPlaySirens() {
            return GetValue<System.Boolean>("CanPlaySirens");
        }
        public System.String CollectionName() {
            return GetValue<System.String>("CollectionName");
        }
        public System.Boolean CopsEnabled_Local() {
            return GetValue<System.Boolean>("CopsEnabled_Local");
        }
        public System.Boolean CopsEnabled_Remote() {
            return GetValue<System.Boolean>("CopsEnabled_Remote");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> EAMusicList() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("EAMusicList");
        }
        public System.Boolean Enable_PlayerControl() {
            return GetValue<System.Boolean>("Enable_PlayerControl");
        }
        public System.Boolean Enable_PlayerEnterSafehouse() {
            return GetValue<System.Boolean>("Enable_PlayerEnterSafehouse");
        }
        public System.Boolean Enable_PlayerJoinEvent() {
            return GetValue<System.Boolean>("Enable_PlayerJoinEvent");
        }
        public System.Boolean Enable_PlayerPursuitInitiate() {
            return GetValue<System.Boolean>("Enable_PlayerPursuitInitiate");
        }
        public System.Boolean Enable_PlayerTeleport() {
            return GetValue<System.Boolean>("Enable_PlayerTeleport");
        }
        public VaultLib.Support.World.VLT.Interop.FEState FEState() {
            return GetValue<VaultLib.Support.World.VLT.Interop.FEState>("FEState");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> FreeroamHeroMusicTrack() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("FreeroamHeroMusicTrack");
        }
        public System.Boolean HasRoute() {
            return GetValue<System.Boolean>("HasRoute");
        }
        public System.String HeatLevelOverride() {
            return GetValue<System.String>("HeatLevelOverride");
        }
        // unknown type: eSFXOBJ_MUSICPLAYER_MIXINPUT
        public VaultLib.Core.Types.VLTUnknown HeroMusicTrackNicInputTrigger() {
            return GetValue<VaultLib.Core.Types.VLTUnknown>("HeroMusicTrackNicInputTrigger");
        }
        // unknown type: eSFXOBJ_MUSICPLAYER_MIXOUT
        public VaultLib.Core.Types.VLTUnknown HeroMusicTrackVolSlot() {
            return GetValue<VaultLib.Core.Types.VLTUnknown>("HeroMusicTrackVolSlot");
        }
        public List<VaultLib.Support.World.VLT.GameCore.PhysicsEntityPair> IgnoreInteractions() {
            return GetArray<VaultLib.Support.World.VLT.GameCore.PhysicsEntityPair>("IgnoreInteractions");
        }
        public System.Boolean IsDragRaceMode() {
            return GetValue<System.Boolean>("IsDragRaceMode");
        }
        public System.Boolean IsOffline() {
            return GetValue<System.Boolean>("IsOffline");
        }
        public System.Boolean IsPursuitActive() {
            return GetValue<System.Boolean>("IsPursuitActive");
        }
        public System.Boolean IsRaceMusic() {
            return GetValue<System.Boolean>("IsRaceMusic");
        }
        public System.Boolean IsSpectating() {
            return GetValue<System.Boolean>("IsSpectating");
        }
        public System.Boolean KillSafehouseMusic() {
            return GetValue<System.Boolean>("KillSafehouseMusic");
        }
        public System.Single MinSpeedConsideredNotStopped() {
            return GetValue<System.Single>("MinSpeedConsideredNotStopped");
        }
        public System.Single MinSpeedConsideredStopped() {
            return GetValue<System.Single>("MinSpeedConsideredStopped");
        }
        public System.Single MinTimePlayerAtHighSpeed() {
            return GetValue<System.Single>("MinTimePlayerAtHighSpeed");
        }
        public System.Single MinTimePlayerStoppedHeroTrack() {
            return GetValue<System.Single>("MinTimePlayerStoppedHeroTrack");
        }
        // unknown type: eSFXOBJ_BLACKBOARD_MIXINPUT
        public List<VaultLib.Core.Types.VLTUnknown> MixerFlags() {
            return GetArray<VaultLib.Core.Types.VLTUnknown>("MixerFlags");
        }
        public System.Boolean MultiplayerPursuitTimeLimitWarning() {
            return GetValue<System.Boolean>("MultiplayerPursuitTimeLimitWarning");
        }
        public System.Boolean MultipleSuspects() {
            return GetValue<System.Boolean>("MultipleSuspects");
        }
        public System.Single MusicFadeTime() {
            return GetValue<System.Single>("MusicFadeTime");
        }
        // unknown type: eSFXOBJ_MUSICPLAYER_MIXINPUT
        public VaultLib.Core.Types.VLTUnknown MusicPlayerNicInputTrigger() {
            return GetValue<VaultLib.Core.Types.VLTUnknown>("MusicPlayerNicInputTrigger");
        }
        // unknown type: eSFXOBJ_MUSICPLAYER_MIXOUT
        public VaultLib.Core.Types.VLTUnknown MusicPlayerVolSlot() {
            return GetValue<VaultLib.Core.Types.VLTUnknown>("MusicPlayerVolSlot");
        }
        public System.Boolean MuteAudio() {
            return GetValue<System.Boolean>("MuteAudio");
        }
        public System.Boolean OnlyPlayOneMusicTrack() {
            return GetValue<System.Boolean>("OnlyPlayOneMusicTrack");
        }
        public System.Boolean OnlyPlayStartMusicOnce() {
            return GetValue<System.Boolean>("OnlyPlayStartMusicOnce");
        }
        public System.Boolean PursuitNeverEnd() {
            return GetValue<System.Boolean>("PursuitNeverEnd");
        }
        public System.Boolean RBAlwaysAvailableForSpeech() {
            return GetValue<System.Boolean>("RBAlwaysAvailableForSpeech");
        }
        public System.Boolean SafehouseMusic() {
            return GetValue<System.Boolean>("SafehouseMusic");
        }
        public System.Boolean ShowOutOfRangeRemoteOpponents() {
            return GetValue<System.Boolean>("ShowOutOfRangeRemoteOpponents");
        }
        public List<VaultLib.Support.World.VLT.SPCHType_1_EventID> SpeechEventFilterList() {
            return GetArray<VaultLib.Support.World.VLT.SPCHType_1_EventID>("SpeechEventFilterList");
        }
        public System.Boolean TargetPathfindingRequired() {
            return GetValue<System.Boolean>("TargetPathfindingRequired");
        }
        public System.Single TimePlayerStoppedHeroTrackThreshold() {
            return GetValue<System.Single>("TimePlayerStoppedHeroTrackThreshold");
        }
        public System.Boolean TrackMilestones() {
            return GetValue<System.Boolean>("TrackMilestones");
        }
        public System.Boolean TrafficEnabled_Local() {
            return GetValue<System.Boolean>("TrafficEnabled_Local");
        }
        public System.Boolean TrafficEnabled_Remote() {
            return GetValue<System.Boolean>("TrafficEnabled_Remote");
        }
        public System.String WorldMapStateName() {
            return GetValue<System.String>("WorldMapStateName");
        }
        #endregion

    }
}
