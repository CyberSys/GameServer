using System.Collections.Generic;
using VaultLib.CodeGen;
using VaultLib.Core.Data;

// Generated by VaultLib.CodeGen @ November 30, 2019 4:47:29 AM for game WORLD
namespace SBRW.GameServer.Attrib.Gen
{
    public class WORLD_world : CollectionWrapperBase {
        #region Field Names
        public const string Name_MAX_NEWTONS = "MAX_NEWTONS";
        public const string Name_MAX_FRAGMENTS = "MAX_FRAGMENTS";
        public const string Name_BONDMOVE_RESTART_CLEAR = "BONDMOVE_RESTART_CLEAR";
        public const string Name_AIC_BOND_RGADGET = "AIC_BOND_RGADGET";
        public const string Name_CHAIN_NEXT_MISSION = "CHAIN_NEXT_MISSION";
        public const string Name_SPLITMISSION_PREVHALF = "SPLITMISSION_PREVHALF";
        public const string Name_NUM_PED_TYPES_GC = "NUM_PED_TYPES_GC";
        public const string Name_MAX_TRAFFIC_SPAWN_DISTANCE = "MAX_TRAFFIC_SPAWN_DISTANCE";
        public const string Name_TRAFFIC_LANE_CHANGES = "TRAFFIC_LANE_CHANGES";
        public const string Name_MAX_SMACKABLES = "MAX_SMACKABLES";
        public const string Name_AIC_BOND_LGADGET = "AIC_BOND_LGADGET";
        public const string Name_VEHICLE_SLOTS_AVAIL = "VEHICLE_SLOTS_AVAIL";
        public const string Name_TRAFFIC_SPEED = "TRAFFIC_SPEED";
        public const string Name_WORLD_TYPE = "WORLD_TYPE";
        public const string Name_NUM_CHECKPOINTS = "NUM_CHECKPOINTS";
        public const string Name_PED_OBJECTS = "PED_OBJECTS";
        public const string Name_CONTROLLER_CURVE = "CONTROLLER_CURVE";
        public const string Name_CHAIN_NEXT_MISSION_NAME = "CHAIN_NEXT_MISSION_NAME";
        public const string Name_NUM_PED_TYPES_XBOX = "NUM_PED_TYPES_XBOX";
        public const string Name_HENCH_SLOTS_AVAIL = "HENCH_SLOTS_AVAIL";
        public const string Name_PED_SPAWN_RADIUS = "PED_SPAWN_RADIUS";
        public const string Name_TRAFFIC_TYPES = "TRAFFIC_TYPES";
        public const string Name_RACE_SCORING = "RACE_SCORING";
        public const string Name_ANIM_BANK_NIS_BUFFER = "ANIM_BANK_NIS_BUFFER";
        public const string Name_SPLITMISSION_NEXTHALF = "SPLITMISSION_NEXTHALF";
        public const string Name_ACCUMULATE_SCORES = "ACCUMULATE_SCORES";
        public const string Name_SPLITMISSION_CARRYDAMAGE = "SPLITMISSION_CARRYDAMAGE";
        public const string Name_CHECK_PLAYER_BEHIND_TRAFFIC = "CHECK_PLAYER_BEHIND_TRAFFIC";
        public const string Name_REALIZATION_CONTROLLER = "REALIZATION_CONTROLLER";
        public const string Name_BONDMOVE_DIE_CLEAR = "BONDMOVE_DIE_CLEAR";
        public const string Name_MAX_TRAFFIC = "MAX_TRAFFIC";
        public const string Name_NUM_PED_TYPES_PS2 = "NUM_PED_TYPES_PS2";
        public const string Name_LINEAR_TRACK = "LINEAR_TRACK";
        #endregion

        public WORLD_world(VLTCollection collection) : base(collection) {}

        #region Getters
        public System.Int32 ACCUMULATE_SCORES() {
            return GetValue<System.Int32>("ACCUMULATE_SCORES");
        }
        public VaultLib.ModernBase.StringKey AIC_BOND_LGADGET() {
            return GetValue<VaultLib.ModernBase.StringKey>("AIC_BOND_LGADGET");
        }
        public VaultLib.ModernBase.StringKey AIC_BOND_RGADGET() {
            return GetValue<VaultLib.ModernBase.StringKey>("AIC_BOND_RGADGET");
        }
        public System.Int32 ANIM_BANK_NIS_BUFFER() {
            return GetValue<System.Int32>("ANIM_BANK_NIS_BUFFER");
        }
        public System.Int32 BONDMOVE_DIE_CLEAR() {
            return GetValue<System.Int32>("BONDMOVE_DIE_CLEAR");
        }
        public System.Int32 BONDMOVE_RESTART_CLEAR() {
            return GetValue<System.Int32>("BONDMOVE_RESTART_CLEAR");
        }
        public System.Int32 CHAIN_NEXT_MISSION() {
            return GetValue<System.Int32>("CHAIN_NEXT_MISSION");
        }
        public VaultLib.ModernBase.StringKey CHAIN_NEXT_MISSION_NAME() {
            return GetValue<VaultLib.ModernBase.StringKey>("CHAIN_NEXT_MISSION_NAME");
        }
        public System.Boolean CHECK_PLAYER_BEHIND_TRAFFIC() {
            return GetValue<System.Boolean>("CHECK_PLAYER_BEHIND_TRAFFIC");
        }
        public System.Single CONTROLLER_CURVE() {
            return GetValue<System.Single>("CONTROLLER_CURVE");
        }
        public System.Int32 HENCH_SLOTS_AVAIL() {
            return GetValue<System.Int32>("HENCH_SLOTS_AVAIL");
        }
        public System.Boolean LINEAR_TRACK() {
            return GetValue<System.Boolean>("LINEAR_TRACK");
        }
        public System.UInt32 MAX_FRAGMENTS() {
            return GetValue<System.UInt32>("MAX_FRAGMENTS");
        }
        public System.UInt32 MAX_NEWTONS() {
            return GetValue<System.UInt32>("MAX_NEWTONS");
        }
        public System.UInt32 MAX_SMACKABLES() {
            return GetValue<System.UInt32>("MAX_SMACKABLES");
        }
        public System.Int32 MAX_TRAFFIC() {
            return GetValue<System.Int32>("MAX_TRAFFIC");
        }
        public System.Single MAX_TRAFFIC_SPAWN_DISTANCE() {
            return GetValue<System.Single>("MAX_TRAFFIC_SPAWN_DISTANCE");
        }
        public System.Int32 NUM_CHECKPOINTS() {
            return GetValue<System.Int32>("NUM_CHECKPOINTS");
        }
        public System.Int32 NUM_PED_TYPES_GC() {
            return GetValue<System.Int32>("NUM_PED_TYPES_GC");
        }
        public System.Int32 NUM_PED_TYPES_PS2() {
            return GetValue<System.Int32>("NUM_PED_TYPES_PS2");
        }
        public System.Int32 NUM_PED_TYPES_XBOX() {
            return GetValue<System.Int32>("NUM_PED_TYPES_XBOX");
        }
        public VaultLib.ModernBase.StringKey PED_OBJECTS() {
            return GetValue<VaultLib.ModernBase.StringKey>("PED_OBJECTS");
        }
        public System.Single PED_SPAWN_RADIUS() {
            return GetValue<System.Single>("PED_SPAWN_RADIUS");
        }
        public System.Boolean RACE_SCORING() {
            return GetValue<System.Boolean>("RACE_SCORING");
        }
        public System.Single REALIZATION_CONTROLLER() {
            return GetValue<System.Single>("REALIZATION_CONTROLLER");
        }
        public System.Boolean SPLITMISSION_CARRYDAMAGE() {
            return GetValue<System.Boolean>("SPLITMISSION_CARRYDAMAGE");
        }
        public VaultLib.ModernBase.StringKey SPLITMISSION_NEXTHALF() {
            return GetValue<VaultLib.ModernBase.StringKey>("SPLITMISSION_NEXTHALF");
        }
        public VaultLib.ModernBase.StringKey SPLITMISSION_PREVHALF() {
            return GetValue<VaultLib.ModernBase.StringKey>("SPLITMISSION_PREVHALF");
        }
        public System.Boolean TRAFFIC_LANE_CHANGES() {
            return GetValue<System.Boolean>("TRAFFIC_LANE_CHANGES");
        }
        public System.Single TRAFFIC_SPEED() {
            return GetValue<System.Single>("TRAFFIC_SPEED");
        }
        public List<VaultLib.ModernBase.StringKey> TRAFFIC_TYPES() {
            return GetArray<VaultLib.ModernBase.StringKey>("TRAFFIC_TYPES");
        }
        public System.Int32 VEHICLE_SLOTS_AVAIL() {
            return GetValue<System.Int32>("VEHICLE_SLOTS_AVAIL");
        }
        public VaultLib.ModernBase.StringKey WORLD_TYPE() {
            return GetValue<VaultLib.ModernBase.StringKey>("WORLD_TYPE");
        }
        #endregion

    }
}
