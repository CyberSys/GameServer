using System.Collections.Generic;
using VaultLib.CodeGen;
using VaultLib.Core.Data;

// Generated by VaultLib.CodeGen @ November 30, 2019 4:47:29 AM for game WORLD
namespace SBRW.GameServer.Attrib.Gen
{
    public class WORLD_speechtune : CollectionWrapperBase {
        #region Field Names
        public const string Name_GripCommentDistanceThreshold = "GripCommentDistanceThreshold";
        public const string Name_0x094CC3AB = "0x094CC3AB";
        public const string Name_DragOfflineDistance = "DragOfflineDistance";
        public const string Name_RangeForSpotterBranch = "RangeForSpotterBranch";
        public const string Name_HangTimeForCommentary = "HangTimeForCommentary";
        public const string Name_SuspectOutrunRange = "SuspectOutrunRange";
        public const string Name_PctOfStagingTime = "PctOfStagingTime";
        public const string Name_MinHealthForCommentary = "MinHealthForCommentary";
        public const string Name_MinPursuitDurationForBailouts = "MinPursuitDurationForBailouts";
        public const string Name_key_mouse = "key_mouse";
        public const string Name_BlowbyInterval = "BlowbyInterval";
        public const string Name_TimeConsideredLostNoLOS = "TimeConsideredLostNoLOS";
        public const string Name_CloseDriftSpeedPct = "CloseDriftSpeedPct";
        public const string Name_PriorityWeight = "PriorityWeight";
        public const string Name_SpeedDiffForBlowby = "SpeedDiffForBlowby";
        public const string Name_FinishTimeMargin = "FinishTimeMargin";
        public const string Name_ExceedsDriftSpeedPct = "ExceedsDriftSpeedPct";
        public const string Name_HubAbTrksOwned_Med = "HubAbTrksOwned_Med";
        public const string Name_SpeechDropoffRamp = "SpeechDropoffRamp";
        public const string Name_CrashSlowdownPct = "CrashSlowdownPct";
        public const string Name_NoLOSCommentaryTime = "NoLOSCommentaryTime";
        public const string Name_MinSpeedConsideredStopped = "MinSpeedConsideredStopped";
        public const string Name_OffTrackDistanceThreshold = "OffTrackDistanceThreshold";
        public const string Name_Clip_2_world_cop = "Clip_2_world_cop";
        public const string Name_RBPostOutcomeResetTime = "RBPostOutcomeResetTime";
        public const string Name_CloseDriftAnglePct = "CloseDriftAnglePct";
        public const string Name_CrowdEmitterRadius = "CrowdEmitterRadius";
        public const string Name_MinHeightAirborne = "MinHeightAirborne";
        public const string Name_NotCloseDriftSpeedPct = "NotCloseDriftSpeedPct";
        public const string Name_MaxRangeFor180 = "MaxRangeFor180";
        public const string Name_HubSDHTrksOwned_High = "HubSDHTrksOwned_High";
        public const string Name_ExceedsDriftAnglePct = "ExceedsDriftAnglePct";
        public const string Name_visual_preamp = "visual_preamp";
        public const string Name_PursuitDurationHighIntensity = "PursuitDurationHighIntensity";
        public const string Name_AIRacerProximity = "AIRacerProximity";
        public const string Name_IdealDriftAngle = "IdealDriftAngle";
        public const string Name_HubAbTrksOwned_High = "HubAbTrksOwned_High";
        public const string Name_FlipTimeForCommentary = "FlipTimeForCommentary";
        public const string Name_RetailerTasks = "RetailerTasks";
        public const string Name_MaxRangeForPrimaryBranch = "MaxRangeForPrimaryBranch";
        public const string Name_ImpactForceScaler_car_car = "ImpactForceScaler_car_car";
        public const string Name_BleacherEmitterRadius = "BleacherEmitterRadius";
        public const string Name_MinTimeConsideredStopped = "MinTimeConsideredStopped";
        public const string Name_HubSDHTrksOwned_Med = "HubSDHTrksOwned_Med";
        public const string Name_PlayerSmashSpeedRange = "PlayerSmashSpeedRange";
        public const string Name_MaxTimeFor180 = "MaxTimeFor180";
        public const string Name_ImpactForceScaler_car_world = "ImpactForceScaler_car_world";
        public const string Name_MinIntensityTrafficSmash = "MinIntensityTrafficSmash";
        public const string Name_PursuitInitDelay = "PursuitInitDelay";
        public const string Name_HighIntensityMark = "HighIntensityMark";
        public const string Name_turbosfx_multiplication = "turbosfx_multiplication";
        public const string Name_SpeedThreshFlyFlipIntensity = "SpeedThreshFlyFlipIntensity";
        public const string Name_ExclamationInterval = "ExclamationInterval";
        public const string Name_FreeRoamCommentMinWaitTime = "FreeRoamCommentMinWaitTime";
        public const string Name_BURemindTime = "BURemindTime";
        public const string Name_0xDBEF7CA1 = "0xDBEF7CA1";
        public const string Name_NotCloseDriftAnglePct = "NotCloseDriftAnglePct";
        public const string Name_CollisionMinClosingVelSq = "CollisionMinClosingVelSq";
        public const string Name_MinIntensityCopSmash = "MinIntensityCopSmash";
        public const string Name_MinHavocForSuspectBehavior = "MinHavocForSuspectBehavior";
        public const string Name_MinContigFramesFor180 = "MinContigFramesFor180";
        public const string Name_MinIntensitySideswipe = "MinIntensitySideswipe";
        public const string Name_HeavyDamageThreshold = "HeavyDamageThreshold";
        public const string Name_OutcomeFailSpeed = "OutcomeFailSpeed";
        public const string Name_TimeLostOffTrack = "TimeLostOffTrack";
        public const string Name_PursuitInactivityTimer = "PursuitInactivityTimer";
        public const string Name_intro19e_supporttable = "intro19e_supporttable";
        public const string Name_TimeOffTrack = "TimeOffTrack";
        #endregion

        public WORLD_speechtune(VLTCollection collection) : base(collection) {}

        #region Getters
        public System.Single AIRacerProximity() {
            return GetValue<System.Single>("AIRacerProximity");
        }
        public System.Single BleacherEmitterRadius() {
            return GetValue<System.Single>("BleacherEmitterRadius");
        }
        public System.Single BlowbyInterval() {
            return GetValue<System.Single>("BlowbyInterval");
        }
        public System.Single BURemindTime() {
            return GetValue<System.Single>("BURemindTime");
        }
        public System.Single Clip_2_world_cop() {
            return GetValue<System.Single>("Clip_2_world_cop");
        }
        public System.Single CloseDriftAnglePct() {
            return GetValue<System.Single>("CloseDriftAnglePct");
        }
        public System.Single CloseDriftSpeedPct() {
            return GetValue<System.Single>("CloseDriftSpeedPct");
        }
        public System.Single CollisionMinClosingVelSq() {
            return GetValue<System.Single>("CollisionMinClosingVelSq");
        }
        public System.Single CrashSlowdownPct() {
            return GetValue<System.Single>("CrashSlowdownPct");
        }
        public System.Single CrowdEmitterRadius() {
            return GetValue<System.Single>("CrowdEmitterRadius");
        }
        public System.Single DragOfflineDistance() {
            return GetValue<System.Single>("DragOfflineDistance");
        }
        public System.Single ExceedsDriftAnglePct() {
            return GetValue<System.Single>("ExceedsDriftAnglePct");
        }
        public System.Single ExceedsDriftSpeedPct() {
            return GetValue<System.Single>("ExceedsDriftSpeedPct");
        }
        public System.Single ExclamationInterval() {
            return GetValue<System.Single>("ExclamationInterval");
        }
        // unknown type: Csis::Type_arrest_line_number
        public List<VaultLib.Core.Types.VLTUnknown> field_0x094CC3AB() {
            return GetArray<VaultLib.Core.Types.VLTUnknown>("0x094CC3AB");
        }
        // unknown type: Csis::Type_arrest_line_number
        public List<VaultLib.Core.Types.VLTUnknown> field_0xDBEF7CA1() {
            return GetArray<VaultLib.Core.Types.VLTUnknown>("0xDBEF7CA1");
        }
        public System.Single FinishTimeMargin() {
            return GetValue<System.Single>("FinishTimeMargin");
        }
        public System.Single FlipTimeForCommentary() {
            return GetValue<System.Single>("FlipTimeForCommentary");
        }
        public System.Single FreeRoamCommentMinWaitTime() {
            return GetValue<System.Single>("FreeRoamCommentMinWaitTime");
        }
        public System.Single GripCommentDistanceThreshold() {
            return GetValue<System.Single>("GripCommentDistanceThreshold");
        }
        public System.Single HangTimeForCommentary() {
            return GetValue<System.Single>("HangTimeForCommentary");
        }
        public System.Single HeavyDamageThreshold() {
            return GetValue<System.Single>("HeavyDamageThreshold");
        }
        public System.SByte HighIntensityMark() {
            return GetValue<System.SByte>("HighIntensityMark");
        }
        public System.Single HubAbTrksOwned_High() {
            return GetValue<System.Single>("HubAbTrksOwned_High");
        }
        public System.Single HubAbTrksOwned_Med() {
            return GetValue<System.Single>("HubAbTrksOwned_Med");
        }
        public System.Single HubSDHTrksOwned_High() {
            return GetValue<System.Single>("HubSDHTrksOwned_High");
        }
        public System.Single HubSDHTrksOwned_Med() {
            return GetValue<System.Single>("HubSDHTrksOwned_Med");
        }
        public System.Single IdealDriftAngle() {
            return GetValue<System.Single>("IdealDriftAngle");
        }
        public System.Single ImpactForceScaler_car_car() {
            return GetValue<System.Single>("ImpactForceScaler_car_car");
        }
        public System.Single ImpactForceScaler_car_world() {
            return GetValue<System.Single>("ImpactForceScaler_car_world");
        }
        public List<System.Single> intro19e_supporttable() {
            return GetArray<System.Single>("intro19e_supporttable");
        }
        public System.Single key_mouse() {
            return GetValue<System.Single>("key_mouse");
        }
        public System.Single MaxRangeFor180() {
            return GetValue<System.Single>("MaxRangeFor180");
        }
        public System.Single MaxRangeForPrimaryBranch() {
            return GetValue<System.Single>("MaxRangeForPrimaryBranch");
        }
        public System.Single MaxTimeFor180() {
            return GetValue<System.Single>("MaxTimeFor180");
        }
        public System.Int32 MinContigFramesFor180() {
            return GetValue<System.Int32>("MinContigFramesFor180");
        }
        public System.Int32 MinHavocForSuspectBehavior() {
            return GetValue<System.Int32>("MinHavocForSuspectBehavior");
        }
        public System.Single MinHealthForCommentary() {
            return GetValue<System.Single>("MinHealthForCommentary");
        }
        public System.Single MinHeightAirborne() {
            return GetValue<System.Single>("MinHeightAirborne");
        }
        public System.Single MinIntensityCopSmash() {
            return GetValue<System.Single>("MinIntensityCopSmash");
        }
        public System.Single MinIntensitySideswipe() {
            return GetValue<System.Single>("MinIntensitySideswipe");
        }
        public System.Single MinIntensityTrafficSmash() {
            return GetValue<System.Single>("MinIntensityTrafficSmash");
        }
        public System.Single MinPursuitDurationForBailouts() {
            return GetValue<System.Single>("MinPursuitDurationForBailouts");
        }
        public System.Single MinSpeedConsideredStopped() {
            return GetValue<System.Single>("MinSpeedConsideredStopped");
        }
        public System.Single MinTimeConsideredStopped() {
            return GetValue<System.Single>("MinTimeConsideredStopped");
        }
        public System.Single NoLOSCommentaryTime() {
            return GetValue<System.Single>("NoLOSCommentaryTime");
        }
        public System.Single NotCloseDriftAnglePct() {
            return GetValue<System.Single>("NotCloseDriftAnglePct");
        }
        public System.Single NotCloseDriftSpeedPct() {
            return GetValue<System.Single>("NotCloseDriftSpeedPct");
        }
        public System.Single OffTrackDistanceThreshold() {
            return GetValue<System.Single>("OffTrackDistanceThreshold");
        }
        public System.Single OutcomeFailSpeed() {
            return GetValue<System.Single>("OutcomeFailSpeed");
        }
        public System.Single PctOfStagingTime() {
            return GetValue<System.Single>("PctOfStagingTime");
        }
        public List<System.Single> PlayerSmashSpeedRange() {
            return GetArray<System.Single>("PlayerSmashSpeedRange");
        }
        public System.Single PriorityWeight() {
            return GetValue<System.Single>("PriorityWeight");
        }
        public System.Single PursuitDurationHighIntensity() {
            return GetValue<System.Single>("PursuitDurationHighIntensity");
        }
        public List<System.Single> PursuitInactivityTimer() {
            return GetArray<System.Single>("PursuitInactivityTimer");
        }
        public System.Single PursuitInitDelay() {
            return GetValue<System.Single>("PursuitInitDelay");
        }
        public System.Single RangeForSpotterBranch() {
            return GetValue<System.Single>("RangeForSpotterBranch");
        }
        public System.Single RBPostOutcomeResetTime() {
            return GetValue<System.Single>("RBPostOutcomeResetTime");
        }
        public System.Single RetailerTasks() {
            return GetValue<System.Single>("RetailerTasks");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector2 SpeechDropoffRamp() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector2>("SpeechDropoffRamp");
        }
        public System.Single SpeedDiffForBlowby() {
            return GetValue<System.Single>("SpeedDiffForBlowby");
        }
        public System.Single SpeedThreshFlyFlipIntensity() {
            return GetValue<System.Single>("SpeedThreshFlyFlipIntensity");
        }
        public System.Single SuspectOutrunRange() {
            return GetValue<System.Single>("SuspectOutrunRange");
        }
        public System.Single TimeConsideredLostNoLOS() {
            return GetValue<System.Single>("TimeConsideredLostNoLOS");
        }
        public System.Single TimeLostOffTrack() {
            return GetValue<System.Single>("TimeLostOffTrack");
        }
        public System.Single TimeOffTrack() {
            return GetValue<System.Single>("TimeOffTrack");
        }
        public System.UInt32 turbosfx_multiplication() {
            return GetValue<System.UInt32>("turbosfx_multiplication");
        }
        public System.Single visual_preamp() {
            return GetValue<System.Single>("visual_preamp");
        }
        #endregion

    }
}
