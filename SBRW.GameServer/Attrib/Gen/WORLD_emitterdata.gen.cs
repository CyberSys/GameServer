using System.Collections.Generic;
using VaultLib.CodeGen;
using VaultLib.Core.Data;

// Generated by VaultLib.CodeGen @ November 30, 2019 4:47:29 AM for game WORLD
namespace SBRW.GameServer.Attrib.Gen
{
    public class WORLD_emitterdata : CollectionWrapperBase {
        #region Field Names
        public const string Name_LocalSpace = "LocalSpace";
        public const string Name_SpreadAsDisc = "SpreadAsDisc";
        public const string Name_VolumeExtent = "VolumeExtent";
        public const string Name_RandomRotationDirection = "RandomRotationDirection";
        public const string Name_VelocityStart = "VelocityStart";
        public const string Name_VolumeCenter = "VolumeCenter";
        public const string Name_LiveryBushing = "LiveryBushing";
        public const string Name_InitialAngleRange = "InitialAngleRange";
        public const string Name_RotationalVelocity = "RotationalVelocity";
        public const string Name_RotationVariance = "RotationVariance";
        public const string Name_OnCycleVariance = "OnCycleVariance";
        public const string Name_Speed = "Speed";
        public const string Name_Color2 = "Color2";
        public const string Name_VelocityDelta = "VelocityDelta";
        public const string Name_MotionLive = "MotionLive";
        public const string Name_Drag = "Drag";
        public const string Name_SpeedVariance = "SpeedVariance";
        public const string Name_KeyPositions = "KeyPositions";
        public const string Name_Bounce = "Bounce";
        public const string Name_FarClip = "FarClip";
        public const string Name_MotionInherit = "MotionInherit";
        public const string Name_StartDelayRandomVariance = "StartDelayRandomVariance";
        public const string Name_Texture = "Texture";
        public const string Name_BounceDampen = "BounceDampen";
        public const string Name_AxisConstraint = "AxisConstraint";
        public const string Name_Color4 = "Color4";
        public const string Name_AccelDelta = "AccelDelta";
        public const string Name_AccelStart = "AccelStart";
        public const string Name_ColorVariance = "ColorVariance";
        public const string Name_Life = "Life";
        public const string Name_OffCycleVariance = "OffCycleVariance";
        public const string Name_EliminateUnnecessaryRandomness = "EliminateUnnecessaryRandomness";
        public const string Name_TextureAnimation = "TextureAnimation";
        public const string Name_CollectionName = "CollectionName";
        public const string Name_RenderLinked = "RenderLinked";
        public const string Name_Gravity = "Gravity";
        public const string Name_IsOneShot = "IsOneShot";
        public const string Name_OffCycle = "OffCycle";
        public const string Name_Color3 = "Color3";
        public const string Name_Size = "Size";
        public const string Name_SpreadAngle = "SpreadAngle";
        public const string Name_Color1 = "Color1";
        public const string Name_MotionInheritVariance = "MotionInheritVariance";
        public const string Name_NumParticlesVariance = "NumParticlesVariance";
        public const string Name_SizeVariance = "SizeVariance";
        public const string Name_NumParticles = "NumParticles";
        public const string Name_OnCycle = "OnCycle";
        public const string Name_StartDelay = "StartDelay";
        public const string Name_LifeVariance = "LifeVariance";
        public const string Name_XenonEffect = "XenonEffect";
        #endregion

        public WORLD_emitterdata(VLTCollection collection) : base(collection) {}

        #region Getters
        public VaultLib.Core.Types.Attrib.Types.Vector4 AccelDelta() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector4>("AccelDelta");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector4 AccelStart() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector4>("AccelStart");
        }
        public VaultLib.Support.World.VLT.EffectParticleConstraint AxisConstraint() {
            return GetValue<VaultLib.Support.World.VLT.EffectParticleConstraint>("AxisConstraint");
        }
        public System.Boolean Bounce() {
            return GetValue<System.Boolean>("Bounce");
        }
        public System.Single BounceDampen() {
            return GetValue<System.Single>("BounceDampen");
        }
        public System.String CollectionName() {
            return GetValue<System.String>("CollectionName");
        }
        public System.UInt32 Color1() {
            return GetValue<System.UInt32>("Color1");
        }
        public System.UInt32 Color2() {
            return GetValue<System.UInt32>("Color2");
        }
        public System.UInt32 Color3() {
            return GetValue<System.UInt32>("Color3");
        }
        public System.UInt32 Color4() {
            return GetValue<System.UInt32>("Color4");
        }
        public System.Single ColorVariance() {
            return GetValue<System.Single>("ColorVariance");
        }
        public System.Single Drag() {
            return GetValue<System.Single>("Drag");
        }
        public System.Boolean EliminateUnnecessaryRandomness() {
            return GetValue<System.Boolean>("EliminateUnnecessaryRandomness");
        }
        public System.Single FarClip() {
            return GetValue<System.Single>("FarClip");
        }
        public System.Single Gravity() {
            return GetValue<System.Single>("Gravity");
        }
        public System.Single InitialAngleRange() {
            return GetValue<System.Single>("InitialAngleRange");
        }
        public System.Boolean IsOneShot() {
            return GetValue<System.Boolean>("IsOneShot");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector4 KeyPositions() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector4>("KeyPositions");
        }
        public System.Single Life() {
            return GetValue<System.Single>("Life");
        }
        public System.Single LifeVariance() {
            return GetValue<System.Single>("LifeVariance");
        }
        public VaultLib.Support.World.VLT.EmittedGeometryRecord LiveryBushing() {
            return GetValue<VaultLib.Support.World.VLT.EmittedGeometryRecord>("LiveryBushing");
        }
        public System.Boolean LocalSpace() {
            return GetValue<System.Boolean>("LocalSpace");
        }
        public System.Single MotionInherit() {
            return GetValue<System.Single>("MotionInherit");
        }
        public System.Single MotionInheritVariance() {
            return GetValue<System.Single>("MotionInheritVariance");
        }
        public System.Int32 MotionLive() {
            return GetValue<System.Int32>("MotionLive");
        }
        public System.Single NumParticles() {
            return GetValue<System.Single>("NumParticles");
        }
        public System.Single NumParticlesVariance() {
            return GetValue<System.Single>("NumParticlesVariance");
        }
        public System.Single OffCycle() {
            return GetValue<System.Single>("OffCycle");
        }
        public System.Single OffCycleVariance() {
            return GetValue<System.Single>("OffCycleVariance");
        }
        public System.Single OnCycle() {
            return GetValue<System.Single>("OnCycle");
        }
        public System.Single OnCycleVariance() {
            return GetValue<System.Single>("OnCycleVariance");
        }
        public System.Int32 RandomRotationDirection() {
            return GetValue<System.Int32>("RandomRotationDirection");
        }
        public System.Boolean RenderLinked() {
            return GetValue<System.Boolean>("RenderLinked");
        }
        public System.Single RotationalVelocity() {
            return GetValue<System.Single>("RotationalVelocity");
        }
        public System.Single RotationVariance() {
            return GetValue<System.Single>("RotationVariance");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector4 Size() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector4>("Size");
        }
        public System.Single SizeVariance() {
            return GetValue<System.Single>("SizeVariance");
        }
        public System.Single Speed() {
            return GetValue<System.Single>("Speed");
        }
        public System.Single SpeedVariance() {
            return GetValue<System.Single>("SpeedVariance");
        }
        public System.Single SpreadAngle() {
            return GetValue<System.Single>("SpreadAngle");
        }
        public System.Int32 SpreadAsDisc() {
            return GetValue<System.Int32>("SpreadAsDisc");
        }
        public System.Single StartDelay() {
            return GetValue<System.Single>("StartDelay");
        }
        public System.Boolean StartDelayRandomVariance() {
            return GetValue<System.Boolean>("StartDelayRandomVariance");
        }
        public VaultLib.Support.World.VLT.ParticleTextureRecord Texture() {
            return GetValue<VaultLib.Support.World.VLT.ParticleTextureRecord>("Texture");
        }
        public VaultLib.Support.World.VLT.ParticleAnimationInfo TextureAnimation() {
            return GetValue<VaultLib.Support.World.VLT.ParticleAnimationInfo>("TextureAnimation");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector4 VelocityDelta() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector4>("VelocityDelta");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector4 VelocityStart() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector4>("VelocityStart");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector4 VolumeCenter() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector4>("VolumeCenter");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector4 VolumeExtent() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector4>("VolumeExtent");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> XenonEffect() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("XenonEffect");
        }
        #endregion

    }
}
