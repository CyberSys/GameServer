using VaultLib.CodeGen;
using VaultLib.Core.Data;

// Generated by VaultLib.CodeGen @ November 30, 2019 4:47:29 AM for game WORLD
namespace SBRW.GameServer.Attrib.Gen
{
    public class WORLD_audio_revlimiter : CollectionWrapperBase {
        #region Field Names
        public const string Name_verylongcycle_probability = "verylongcycle_probability";
        public const string Name_load_for_long = "load_for_long";
        public const string Name_verylongcycle_length = "verylongcycle_length";
        public const string Name_load_cut_ratio = "load_cut_ratio";
        public const string Name_cutoff_frames_short = "cutoff_frames_short";
        public const string Name_rpm_drop_ratio_short = "rpm_drop_ratio_short";
        public const string Name_cutoff_frames_long = "cutoff_frames_long";
        public const string Name_random_range_variation = "random_range_variation";
        public const string Name_rpm_ratio_limit = "rpm_ratio_limit";
        public const string Name_BribablePitch = "BribablePitch";
        public const string Name_total_frames_long = "total_frames_long";
        public const string Name_throttle_cut_ratio = "throttle_cut_ratio";
        public const string Name_total_frames_short = "total_frames_short";
        public const string Name_rpm_drop_ratio_long = "rpm_drop_ratio_long";
        #endregion

        public WORLD_audio_revlimiter(VLTCollection collection) : base(collection) {}

        #region Getters
        public System.Single BribablePitch() {
            return GetValue<System.Single>("BribablePitch");
        }
        public System.UInt32 cutoff_frames_long() {
            return GetValue<System.UInt32>("cutoff_frames_long");
        }
        public System.UInt32 cutoff_frames_short() {
            return GetValue<System.UInt32>("cutoff_frames_short");
        }
        public System.Single load_cut_ratio() {
            return GetValue<System.Single>("load_cut_ratio");
        }
        public System.Single load_for_long() {
            return GetValue<System.Single>("load_for_long");
        }
        public System.Single random_range_variation() {
            return GetValue<System.Single>("random_range_variation");
        }
        public System.Single rpm_drop_ratio_long() {
            return GetValue<System.Single>("rpm_drop_ratio_long");
        }
        public System.Single rpm_drop_ratio_short() {
            return GetValue<System.Single>("rpm_drop_ratio_short");
        }
        public System.Single rpm_ratio_limit() {
            return GetValue<System.Single>("rpm_ratio_limit");
        }
        public System.Single throttle_cut_ratio() {
            return GetValue<System.Single>("throttle_cut_ratio");
        }
        public System.UInt32 total_frames_long() {
            return GetValue<System.UInt32>("total_frames_long");
        }
        public System.UInt32 total_frames_short() {
            return GetValue<System.UInt32>("total_frames_short");
        }
        public System.UInt32 verylongcycle_length() {
            return GetValue<System.UInt32>("verylongcycle_length");
        }
        public System.Single verylongcycle_probability() {
            return GetValue<System.Single>("verylongcycle_probability");
        }
        #endregion

    }
}
