using System.Collections.Generic;
using VaultLib.CodeGen;
using VaultLib.Core.Data;

// Generated by VaultLib.CodeGen @ November 30, 2019 4:47:29 AM for game WORLD
namespace SBRW.GameServer.Attrib.Gen
{
    public class WORLD_gameplay : CollectionWrapperBase {
        #region Field Names
        public const string Name_Level = "Level";
        public const string Name_RestoredLobbyDurationInMilliseconds = "RestoredLobbyDurationInMilliseconds";
        public const string Name_SkillModEffectType = "SkillModEffectType";
        public const string Name_TrackMap = "TrackMap";
        public const string Name_FEIcon = "FEIcon";
        public const string Name_MaxRacers = "MaxRacers";
        public const string Name_Client_CarCache_Age_limit = "Client_CarCache_Age_limit";
        public const string Name_StartGridLatSpacing = "StartGridLatSpacing";
        public const string Name_AIShortcutPct = "AIShortcutPct";
        public const string Name_Objectives = "Objectives";
        public const string Name_NameHAL = "NameHAL";
        public const string Name_ShouldUseSpikeStrips = "ShouldUseSpikeStrips";
        public const string Name_RadarDistanceNearRangeMin = "RadarDistanceNearRangeMin";
        public const string Name_CarClass = "CarClass";
        public const string Name_EngageTriggerHeight = "EngageTriggerHeight";
        public const string Name_InitialSpeed = "InitialSpeed";
        public const string Name_SkillModEffectMaxAmount = "SkillModEffectMaxAmount";
        public const string Name_RadarDistanceFarRangeMax = "RadarDistanceFarRangeMax";
        public const string Name_MapCurveRef = "MapCurveRef";
        public const string Name_NumLaps = "NumLaps";
        public const string Name_ObjectType = "ObjectType";
        public const string Name_EventIconType = "EventIconType";
        public const string Name_Value1 = "Value1";
        public const string Name_Marker = "Marker";
        public const string Name_AIUsePowerUps = "AIUsePowerUps";
        public const string Name_PoliceLines = "PoliceLines";
        public const string Name_MilestoneType = "MilestoneType";
        public const string Name_ShortcutMaxChance = "ShortcutMaxChance";
        public const string Name_Value2 = "Value2";
        public const string Name_Reward_Tokens = "Reward_Tokens";
        public const string Name_StartDateTime = "StartDateTime";
        public const string Name_Checkpoints = "Checkpoints";
        public const string Name_StartGridExtraLaneOffset = "StartGridExtraLaneOffset";
        public const string Name_VehicleKey = "VehicleKey";
        public const string Name_Coins = "Coins";
        public const string Name_RoutingMethod = "RoutingMethod";
        public const string Name_HasMatchMakingTimeout = "HasMatchMakingTimeout";
        public const string Name_DelayTime = "DelayTime";
        public const string Name_MinLifetime = "MinLifetime";
        public const string Name_IsEnabled = "IsEnabled";
        public const string Name_DisconnectDelayInMilliseconds = "DisconnectDelayInMilliseconds";
        public const string Name_RemoteEntitlementTag = "RemoteEntitlementTag";
        public const string Name_Localization = "Localization";
        public const string Name_PowerUpType = "PowerUpType";
        public const string Name_TargetActivity = "TargetActivity";
        public const string Name_SkillModCategory = "SkillModCategory";
        public const string Name_StrikeCount = "StrikeCount";
        public const string Name_Distance = "Distance";
        public const string Name_CarClassMaxRating = "CarClassMaxRating";
        public const string Name_MinLevel = "MinLevel";
        public const string Name_StartGridLongSpacing = "StartGridLongSpacing";
        public const string Name_CatchUpMinRank = "CatchUpMinRank";
        public const string Name_EngageTriggerRadius = "EngageTriggerRadius";
        public const string Name_Rarity = "Rarity";
        public const string Name_RadarDistanceMediumRangeMin = "RadarDistanceMediumRangeMin";
        public const string Name_FlareSpacing = "FlareSpacing";
        public const string Name_Radius = "Radius";
        public const string Name_Name = "Name";
        public const string Name_Template = "Template";
        public const string Name_IsEventOnly = "IsEventOnly";
        public const string Name_layoutpos = "layoutpos";
        public const string Name_AmountAlternateLocalization = "AmountAlternateLocalization";
        public const string Name_NumCoins = "NumCoins";
        public const string Name_ScoringMethod = "ScoringMethod";
        public const string Name_RespawnLocation = "RespawnLocation";
        public const string Name_TimeLimitWarning = "TimeLimitWarning";
        public const string Name_IsBusted = "IsBusted";
        public const string Name_RewardModeLocalization = "RewardModeLocalization";
        public const string Name_NameLocalization = "NameLocalization";
        public const string Name_StartGridWidth = "StartGridWidth";
        public const string Name_EventModeId = "EventModeId";
        public const string Name_ShortcutMinChance = "ShortcutMinChance";
        public const string Name_PointOfInterest = "PointOfInterest";
        public const string Name_CameraModelMarker = "CameraModelMarker";
        public const string Name_StartGridLatOffset = "StartGridLatOffset";
        public const string Name_TopSpeed = "TopSpeed";
        public const string Name_AmountLocalization = "AmountLocalization";
        public const string Name_Width = "Width";
        public const string Name_Opponents = "Opponents";
        public const string Name_FEIconLocked = "FEIconLocked";
        public const string Name_Rotation = "Rotation";
        public const string Name_Value = "Value";
        public const string Name_CarClassMinRating = "CarClassMinRating";
        public const string Name_DescriptionLocalization = "DescriptionLocalization";
        public const string Name_ScriptAction = "ScriptAction";
        public const string Name_PointOfInterestBehavior = "PointOfInterestBehavior";
        public const string Name_SkillModPartQuality = "SkillModPartQuality";
        public const string Name_MapCurvePoint = "MapCurvePoint";
        public const string Name_HasTraffic = "HasTraffic";
        public const string Name_SkillModEffects = "SkillModEffects";
        public const string Name_MaxLevel = "MaxLevel";
        public const string Name_MapArea = "MapArea";
        public const string Name_DragModeEnabled = "DragModeEnabled";
        public const string Name_DelayInterval = "DelayInterval";
        public const string Name_PowerupConfiguration = "PowerupConfiguration";
        public const string Name_PursuitCheckpoint = "PursuitCheckpoint";
        public const string Name_FeatureType = "FeatureType";
        public const string Name_SpectateMethod = "SpectateMethod";
        public const string Name_InitialHeat = "InitialHeat";
        public const string Name_Dimensions = "Dimensions";
        public const string Name_AIShortcutPositionBias = "AIShortcutPositionBias";
        public const string Name_SkillModEffectTypeId = "SkillModEffectTypeId";
        public const string Name_HurryUpTimeoutInMilliseconds = "HurryUpTimeoutInMilliseconds";
        public const string Name_EngageTrigger = "EngageTrigger";
        public const string Name_TimeLimit = "TimeLimit";
        public const string Name_Description = "Description";
        public const string Name_TrackLayout = "TrackLayout";
        public const string Name_SpawnLocation = "SpawnLocation";
        public const string Name_NumRhinos = "NumRhinos";
        public const string Name_Shortcuts = "Shortcuts";
        public const string Name_CollisionType = "CollisionType";
        public const string Name_MapCurve = "MapCurve";
        public const string Name_TrackLength = "TrackLength";
        public const string Name_SkillModEffectTypeAmountDisplay = "SkillModEffectTypeAmountDisplay";
        public const string Name_RespawnSpeedMultiplier = "RespawnSpeedMultiplier";
        public const string Name_DifficultyLevel = "DifficultyLevel";
        public const string Name_PresetRides = "PresetRides";
        public const string Name_EventModeIcon = "EventModeIcon";
        public const string Name_EventFlow = "EventFlow";
        public const string Name_RewardMode = "RewardMode";
        public const string Name_ZoneId = "ZoneId";
        public const string Name_Bounty = "Bounty";
        public const string Name_OpponentCount = "OpponentCount";
        public const string Name_TrafficDensity = "TrafficDensity";
        public const string Name_BlackBoardMap = "BlackBoardMap";
        public const string Name_Children = "Children";
        public const string Name_gameplayvault = "gameplayvault";
        public const string Name_Category = "Category";
        public const string Name_Vehicles = "Vehicles";
        public const string Name_MilestoneCount = "MilestoneCount";
        public const string Name_PartZone = "PartZone";
        public const string Name_Milestones = "Milestones";
        public const string Name_RequiresEnhancerWorldMap = "RequiresEnhancerWorldMap";
        public const string Name_PointOfInterestType = "PointOfInterestType";
        public const string Name_Client_CarCache_Max_size = "Client_CarCache_Max_size";
        public const string Name_Tier = "Tier";
        public const string Name_AreaName = "AreaName";
        public const string Name_EventModeSupportsRaceNow = "EventModeSupportsRaceNow";
        public const string Name_FinishLine = "FinishLine";
        public const string Name_CollectionName = "CollectionName";
        public const string Name_EffectHash = "EffectHash";
        public const string Name_ShowFlasher = "ShowFlasher";
        public const string Name_Position = "Position";
        public const string Name_EventModeLocalization = "EventModeLocalization";
        public const string Name_Acceleration = "Acceleration";
        public const string Name_StartTimeInSeconds = "StartTimeInSeconds";
        public const string Name_RequiredLevel = "RequiredLevel";
        public const string Name_GhostDebuffTime = "GhostDebuffTime";
        public const string Name_EventObjectives = "EventObjectives";
        public const string Name_PerfectStartBaseRange = "PerfectStartBaseRange";
        public const string Name_IsDragEvent = "IsDragEvent";
        public const string Name_Reward_Rep = "Reward_Rep";
        public const string Name_SetID = "SetID";
        public const string Name_EventModeDescriptionLocalization = "EventModeDescriptionLocalization";
        public const string Name_EndDateTime = "EndDateTime";
        public const string Name_ShouldArbitrate = "ShouldArbitrate";
        public const string Name_SkillModEffectAmount = "SkillModEffectAmount";
        public const string Name_GPSArrow = "GPSArrow";
        public const string Name_PowerupBlackoutAtEventStart = "PowerupBlackoutAtEventStart";
        public const string Name_Height = "Height";
        public const string Name_ObjectFlags = "ObjectFlags";
        public const string Name_RacerName = "RacerName";
        public const string Name_Color = "Color";
        public const string Name_Boost = "Boost";
        public const string Name_CameraBounds = "CameraBounds";
        public const string Name_SkillModEffectAmountImperialConversion = "SkillModEffectAmountImperialConversion";
        public const string Name_ResetMarker = "ResetMarker";
        public const string Name_PerfectStartBaseDuration = "PerfectStartBaseDuration";
        public const string Name_FlasherHALId = "FlasherHALId";
        public const string Name_PursuitEscalation = "PursuitEscalation";
        public const string Name_Rewards = "Rewards";
        public const string Name_Region = "Region";
        public const string Name_UseMatchRatings = "UseMatchRatings";
        public const string Name_EventId = "EventId";
        public const string Name_EngageTriggerPosition = "EngageTriggerPosition";
        public const string Name_Order = "Order";
        public const string Name_CoinRegion = "CoinRegion";
        public const string Name_ProductIdConfig = "ProductIdConfig";
        public const string Name_Handling = "Handling";
        public const string Name_DragModeExclusive = "DragModeExclusive";
        public const string Name_MapRegion = "MapRegion";
        public const string Name_StartGridIsStaggered = "StartGridIsStaggered";
        public const string Name_BehaviorMap = "BehaviorMap";
        public const string Name_LocalizationTag = "LocalizationTag";
        public const string Name_SpawnPoint = "SpawnPoint";
        public const string Name_Personal = "Personal";
        public const string Name_RegionName = "RegionName";
        public const string Name_Barriers = "Barriers";
        public const string Name_CopSpawnLocation = "CopSpawnLocation";
        public const string Name_MapTriangle = "MapTriangle";
        public const string Name_Cost = "Cost";
        public const string Name_RecoverLobbySupported = "RecoverLobbySupported";
        public const string Name_EventCategoryLocalization = "EventCategoryLocalization";
        public const string Name_Primary = "Primary";
        public const string Name_SpectateTime = "SpectateTime";
        public const string Name_RemovedByEnhancerWorldMap = "RemovedByEnhancerWorldMap";
        public const string Name_StartGrid = "StartGrid";
        public const string Name_MiniMapIconHash = "MiniMapIconHash";
        public const string Name_SkillModEffectEventMode = "SkillModEffectEventMode";
        public const string Name_SkillModEffectTypeDisplay = "SkillModEffectTypeDisplay";
        public const string Name_GameModeId = "GameModeId";
        public const string Name_Hud = "Hud";
        public const string Name_EndTimeInSeconds = "EndTimeInSeconds";
        public const string Name_CategoryLocalization = "CategoryLocalization";
        public const string Name_RadarDistanceFarRangeMin = "RadarDistanceFarRangeMin";
        public const string Name_MinRacers = "MinRacers";
        public const string Name_EventIdList = "EventIdList";
        #endregion

        public WORLD_gameplay(VLTCollection collection) : base(collection) {}

        #region Getters
        public System.Single Acceleration() {
            return GetValue<System.Single>("Acceleration");
        }
        public System.UInt16 AIShortcutPct() {
            return GetValue<System.UInt16>("AIShortcutPct");
        }
        public System.Int16 AIShortcutPositionBias() {
            return GetValue<System.Int16>("AIShortcutPositionBias");
        }
        public System.Boolean AIUsePowerUps() {
            return GetValue<System.Boolean>("AIUsePowerUps");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash AmountAlternateLocalization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("AmountAlternateLocalization");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash AmountLocalization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("AmountLocalization");
        }
        public System.String AreaName() {
            return GetValue<System.String>("AreaName");
        }
        public List<System.Int32> Barriers() {
            return GetArray<System.Int32>("Barriers");
        }
        public List<VaultLib.Support.World.VLT.GameCore.BehaviorSlot> BehaviorMap() {
            return GetArray<VaultLib.Support.World.VLT.GameCore.BehaviorSlot>("BehaviorMap");
        }
        public List<VaultLib.Support.World.VLT.GameCore.BlackBoardSlot> BlackBoardMap() {
            return GetArray<VaultLib.Support.World.VLT.GameCore.BlackBoardSlot>("BlackBoardMap");
        }
        public System.Int32 Boost() {
            return GetValue<System.Int32>("Boost");
        }
        public System.Int32 Bounty() {
            return GetValue<System.Int32>("Bounty");
        }
        public VaultLib.CodeGen.RefSpecWrapper CameraBounds() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("CameraBounds");
        }
        public VaultLib.CodeGen.RefSpecWrapper CameraModelMarker() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("CameraModelMarker");
        }
        public VaultLib.CodeGen.RefSpecWrapper CarClass() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("CarClass");
        }
        public System.Int16 CarClassMaxRating() {
            return GetValue<System.Int16>("CarClassMaxRating");
        }
        public System.Int16 CarClassMinRating() {
            return GetValue<System.Int16>("CarClassMinRating");
        }
        public System.SByte CatchUpMinRank() {
            return GetValue<System.SByte>("CatchUpMinRank");
        }
        public System.UInt32 Category() {
            return GetValue<System.UInt32>("Category");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash CategoryLocalization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("CategoryLocalization");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> Checkpoints() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("Checkpoints");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> Children() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("Children");
        }
        public System.Int32 Client_CarCache_Age_limit() {
            return GetValue<System.Int32>("Client_CarCache_Age_limit");
        }
        public System.Int32 Client_CarCache_Max_size() {
            return GetValue<System.Int32>("Client_CarCache_Max_size");
        }
        public VaultLib.CodeGen.RefSpecWrapper CoinRegion() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("CoinRegion");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> Coins() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("Coins");
        }
        public System.String CollectionName() {
            return GetValue<System.String>("CollectionName");
        }
        public VaultLib.Support.World.VLT.GameCore.Collision.TriggerType CollisionType() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.Collision.TriggerType>("CollisionType");
        }
        public VaultLib.Core.Types.Attrib.Types.FloatColour Color() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.FloatColour>("Color");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> CopSpawnLocation() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("CopSpawnLocation");
        }
        public System.UInt32 Cost() {
            return GetValue<System.UInt32>("Cost");
        }
        public System.Single DelayInterval() {
            return GetValue<System.Single>("DelayInterval");
        }
        public System.Single DelayTime() {
            return GetValue<System.Single>("DelayTime");
        }
        public System.String Description() {
            return GetValue<System.String>("Description");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash DescriptionLocalization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("DescriptionLocalization");
        }
        public System.Int32 DifficultyLevel() {
            return GetValue<System.Int32>("DifficultyLevel");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector3 Dimensions() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector3>("Dimensions");
        }
        public System.Int32 DisconnectDelayInMilliseconds() {
            return GetValue<System.Int32>("DisconnectDelayInMilliseconds");
        }
        public System.Single Distance() {
            return GetValue<System.Single>("Distance");
        }
        public System.Boolean DragModeEnabled() {
            return GetValue<System.Boolean>("DragModeEnabled");
        }
        public System.Boolean DragModeExclusive() {
            return GetValue<System.Boolean>("DragModeExclusive");
        }
        public VaultLib.Support.World.VLT.GameCore.StringKey EffectHash() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.StringKey>("EffectHash");
        }
        public System.Int64 EndDateTime() {
            return GetValue<System.Int64>("EndDateTime");
        }
        public System.Single EndTimeInSeconds() {
            return GetValue<System.Single>("EndTimeInSeconds");
        }
        public VaultLib.CodeGen.RefSpecWrapper EngageTrigger() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("EngageTrigger");
        }
        public System.Single EngageTriggerHeight() {
            return GetValue<System.Single>("EngageTriggerHeight");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector3 EngageTriggerPosition() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector3>("EngageTriggerPosition");
        }
        public System.Single EngageTriggerRadius() {
            return GetValue<System.Single>("EngageTriggerRadius");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash EventCategoryLocalization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("EventCategoryLocalization");
        }
        public VaultLib.Support.World.VLT.GameCore.StringKey EventFlow() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.StringKey>("EventFlow");
        }
        public VaultLib.Support.World.VLT.GameCore.EventType EventIconType() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.EventType>("EventIconType");
        }
        public System.UInt32 EventId() {
            return GetValue<System.UInt32>("EventId");
        }
        public List<System.UInt32> EventIdList() {
            return GetArray<System.UInt32>("EventIdList");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash EventModeDescriptionLocalization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("EventModeDescriptionLocalization");
        }
        public System.String EventModeIcon() {
            return GetValue<System.String>("EventModeIcon");
        }
        public VaultLib.Support.World.VLT.GameCore.EventMode EventModeId() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.EventMode>("EventModeId");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash EventModeLocalization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("EventModeLocalization");
        }
        public System.Boolean EventModeSupportsRaceNow() {
            return GetValue<System.Boolean>("EventModeSupportsRaceNow");
        }
        public VaultLib.CodeGen.RefSpecWrapper EventObjectives() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("EventObjectives");
        }
        public VaultLib.Support.World.VLT.EA.WorldMap.eWMFeatureType FeatureType() {
            return GetValue<VaultLib.Support.World.VLT.EA.WorldMap.eWMFeatureType>("FeatureType");
        }
        public System.String FEIcon() {
            return GetValue<System.String>("FEIcon");
        }
        public System.String FEIconLocked() {
            return GetValue<System.String>("FEIconLocked");
        }
        public VaultLib.CodeGen.RefSpecWrapper FinishLine() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("FinishLine");
        }
        public System.Single FlareSpacing() {
            return GetValue<System.Single>("FlareSpacing");
        }
        public System.String FlasherHALId() {
            return GetValue<System.String>("FlasherHALId");
        }
        public System.UInt32 GameModeId() {
            return GetValue<System.UInt32>("GameModeId");
        }
        public System.String gameplayvault() {
            return GetValue<System.String>("gameplayvault");
        }
        public System.Single GhostDebuffTime() {
            return GetValue<System.Single>("GhostDebuffTime");
        }
        public System.Boolean GPSArrow() {
            return GetValue<System.Boolean>("GPSArrow");
        }
        public System.Single Handling() {
            return GetValue<System.Single>("Handling");
        }
        public System.Boolean HasMatchMakingTimeout() {
            return GetValue<System.Boolean>("HasMatchMakingTimeout");
        }
        public System.Boolean HasTraffic() {
            return GetValue<System.Boolean>("HasTraffic");
        }
        public System.Single Height() {
            return GetValue<System.Single>("Height");
        }
        public List<System.String> Hud() {
            return GetArray<System.String>("Hud");
        }
        public System.Int32 HurryUpTimeoutInMilliseconds() {
            return GetValue<System.Int32>("HurryUpTimeoutInMilliseconds");
        }
        public System.Int32 InitialHeat() {
            return GetValue<System.Int32>("InitialHeat");
        }
        public System.Single InitialSpeed() {
            return GetValue<System.Single>("InitialSpeed");
        }
        public System.Boolean IsBusted() {
            return GetValue<System.Boolean>("IsBusted");
        }
        public System.Boolean IsDragEvent() {
            return GetValue<System.Boolean>("IsDragEvent");
        }
        public System.Boolean IsEnabled() {
            return GetValue<System.Boolean>("IsEnabled");
        }
        public System.Boolean IsEventOnly() {
            return GetValue<System.Boolean>("IsEventOnly");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector2 layoutpos() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector2>("layoutpos");
        }
        public System.Int32 Level() {
            return GetValue<System.Int32>("Level");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash Localization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("Localization");
        }
        public System.Int32 LocalizationTag() {
            return GetValue<System.Int32>("LocalizationTag");
        }
        public VaultLib.CodeGen.RefSpecWrapper MapArea() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("MapArea");
        }
        public List<VaultLib.Support.World.VLT.GMapCurve> MapCurve() {
            return GetArray<VaultLib.Support.World.VLT.GMapCurve>("MapCurve");
        }
        public List<VaultLib.Support.World.VLT.GMapCurvePoint> MapCurvePoint() {
            return GetArray<VaultLib.Support.World.VLT.GMapCurvePoint>("MapCurvePoint");
        }
        public List<VaultLib.Support.World.VLT.GMapCurveRef> MapCurveRef() {
            return GetArray<VaultLib.Support.World.VLT.GMapCurveRef>("MapCurveRef");
        }
        public List<VaultLib.Support.World.VLT.GMapRegionInfo> MapRegion() {
            return GetArray<VaultLib.Support.World.VLT.GMapRegionInfo>("MapRegion");
        }
        public List<VaultLib.Support.World.VLT.GMapTriangle> MapTriangle() {
            return GetArray<VaultLib.Support.World.VLT.GMapTriangle>("MapTriangle");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> Marker() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("Marker");
        }
        public System.UInt32 MaxLevel() {
            return GetValue<System.UInt32>("MaxLevel");
        }
        public System.UInt32 MaxRacers() {
            return GetValue<System.UInt32>("MaxRacers");
        }
        public System.Int32 MilestoneCount() {
            return GetValue<System.Int32>("MilestoneCount");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> Milestones() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("Milestones");
        }
        public VaultLib.Support.World.VLT.GameCore.MilestoneType MilestoneType() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.MilestoneType>("MilestoneType");
        }
        public VaultLib.Support.World.VLT.EA.WorldMap.MiniMapIconHash MiniMapIconHash() {
            return GetValue<VaultLib.Support.World.VLT.EA.WorldMap.MiniMapIconHash>("MiniMapIconHash");
        }
        public System.UInt32 MinLevel() {
            return GetValue<System.UInt32>("MinLevel");
        }
        public System.Single MinLifetime() {
            return GetValue<System.Single>("MinLifetime");
        }
        public System.UInt32 MinRacers() {
            return GetValue<System.UInt32>("MinRacers");
        }
        public System.String Name() {
            return GetValue<System.String>("Name");
        }
        public System.String NameHAL() {
            return GetValue<System.String>("NameHAL");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash NameLocalization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("NameLocalization");
        }
        public System.Int32 NumCoins() {
            return GetValue<System.Int32>("NumCoins");
        }
        public System.Int32 NumLaps() {
            return GetValue<System.Int32>("NumLaps");
        }
        public System.UInt16 NumRhinos() {
            return GetValue<System.UInt16>("NumRhinos");
        }
        public VaultLib.Support.World.VLT.GameCore.ObjFlag ObjectFlags() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.ObjFlag>("ObjectFlags");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> Objectives() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("Objectives");
        }
        public VaultLib.Support.World.VLT.GameCore.ObjType ObjectType() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.ObjType>("ObjectType");
        }
        public System.Int16 OpponentCount() {
            return GetValue<System.Int16>("OpponentCount");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> Opponents() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("Opponents");
        }
        public System.Int32 Order() {
            return GetValue<System.Int32>("Order");
        }
        public VaultLib.Support.World.VLT.PerformanceUpgrades.PartZone PartZone() {
            return GetValue<VaultLib.Support.World.VLT.PerformanceUpgrades.PartZone>("PartZone");
        }
        public System.Single PerfectStartBaseDuration() {
            return GetValue<System.Single>("PerfectStartBaseDuration");
        }
        public System.Single PerfectStartBaseRange() {
            return GetValue<System.Single>("PerfectStartBaseRange");
        }
        public System.Boolean Personal() {
            return GetValue<System.Boolean>("Personal");
        }
        public VaultLib.CodeGen.RefSpecWrapper PointOfInterest() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("PointOfInterest");
        }
        // unknown type: GameCore::PoiBehaviorFlags
        public VaultLib.Core.Types.VLTUnknown PointOfInterestBehavior() {
            return GetValue<VaultLib.Core.Types.VLTUnknown>("PointOfInterestBehavior");
        }
        public VaultLib.Support.World.VLT.EA.WorldMap.POIType PointOfInterestType() {
            return GetValue<VaultLib.Support.World.VLT.EA.WorldMap.POIType>("PointOfInterestType");
        }
        public List<System.Int32> PoliceLines() {
            return GetArray<System.Int32>("PoliceLines");
        }
        public VaultLib.Core.Types.Attrib.Types.Vector3 Position() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Vector3>("Position");
        }
        public System.Single PowerupBlackoutAtEventStart() {
            return GetValue<System.Single>("PowerupBlackoutAtEventStart");
        }
        public VaultLib.Support.World.VLT.GameCore.PowerupConfiguration PowerupConfiguration() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.PowerupConfiguration>("PowerupConfiguration");
        }
        public VaultLib.Support.World.VLT.Victory.DataLayer.Serialization.enumPowerUpType PowerUpType() {
            return GetValue<VaultLib.Support.World.VLT.Victory.DataLayer.Serialization.enumPowerUpType>("PowerUpType");
        }
        public List<System.String> PresetRides() {
            return GetArray<System.String>("PresetRides");
        }
        public System.Boolean Primary() {
            return GetValue<System.Boolean>("Primary");
        }
        public System.String ProductIdConfig() {
            return GetValue<System.String>("ProductIdConfig");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> PursuitCheckpoint() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("PursuitCheckpoint");
        }
        public VaultLib.Support.World.VLT.GameCore.StringKey PursuitEscalation() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.StringKey>("PursuitEscalation");
        }
        public System.String RacerName() {
            return GetValue<System.String>("RacerName");
        }
        public System.Single RadarDistanceFarRangeMax() {
            return GetValue<System.Single>("RadarDistanceFarRangeMax");
        }
        public System.Single RadarDistanceFarRangeMin() {
            return GetValue<System.Single>("RadarDistanceFarRangeMin");
        }
        public System.Single RadarDistanceMediumRangeMin() {
            return GetValue<System.Single>("RadarDistanceMediumRangeMin");
        }
        public System.Single RadarDistanceNearRangeMin() {
            return GetValue<System.Single>("RadarDistanceNearRangeMin");
        }
        public System.Single Radius() {
            return GetValue<System.Single>("Radius");
        }
        public System.Int32 Rarity() {
            return GetValue<System.Int32>("Rarity");
        }
        public System.Boolean RecoverLobbySupported() {
            return GetValue<System.Boolean>("RecoverLobbySupported");
        }
        public VaultLib.CodeGen.RefSpecWrapper Region() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("Region");
        }
        public System.String RegionName() {
            return GetValue<System.String>("RegionName");
        }
        public System.String RemoteEntitlementTag() {
            return GetValue<System.String>("RemoteEntitlementTag");
        }
        // unknown type: GameCore::EnhancerPart
        public VaultLib.Core.Types.VLTUnknown RemovedByEnhancerWorldMap() {
            return GetValue<VaultLib.Core.Types.VLTUnknown>("RemovedByEnhancerWorldMap");
        }
        public System.UInt32 RequiredLevel() {
            return GetValue<System.UInt32>("RequiredLevel");
        }
        // unknown type: GameCore::EnhancerPart
        public VaultLib.Core.Types.VLTUnknown RequiresEnhancerWorldMap() {
            return GetValue<VaultLib.Core.Types.VLTUnknown>("RequiresEnhancerWorldMap");
        }
        public VaultLib.CodeGen.RefSpecWrapper ResetMarker() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("ResetMarker");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> RespawnLocation() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("RespawnLocation");
        }
        public System.Single RespawnSpeedMultiplier() {
            return GetValue<System.Single>("RespawnSpeedMultiplier");
        }
        public System.Int32 RestoredLobbyDurationInMilliseconds() {
            return GetValue<System.Int32>("RestoredLobbyDurationInMilliseconds");
        }
        public System.Int32 Reward_Rep() {
            return GetValue<System.Int32>("Reward_Rep");
        }
        public System.Int32 Reward_Tokens() {
            return GetValue<System.Int32>("Reward_Tokens");
        }
        public VaultLib.Support.World.VLT.GameCore.RewardMode RewardMode() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.RewardMode>("RewardMode");
        }
        public VaultLib.Support.World.VLT.GameCore.LocalizationHash RewardModeLocalization() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.LocalizationHash>("RewardModeLocalization");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> Rewards() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("Rewards");
        }
        public System.Single Rotation() {
            return GetValue<System.Single>("Rotation");
        }
        public VaultLib.Support.World.VLT.GameCore.StringKey RoutingMethod() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.StringKey>("RoutingMethod");
        }
        public VaultLib.Support.World.VLT.GameCore.StringKey ScoringMethod() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.StringKey>("ScoringMethod");
        }
        public VaultLib.Support.World.VLT.GameCore.StringKey ScriptAction() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.StringKey>("ScriptAction");
        }
        public System.Int32 SetID() {
            return GetValue<System.Int32>("SetID");
        }
        public System.Single ShortcutMaxChance() {
            return GetValue<System.Single>("ShortcutMaxChance");
        }
        public System.Single ShortcutMinChance() {
            return GetValue<System.Single>("ShortcutMinChance");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> Shortcuts() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("Shortcuts");
        }
        public System.Boolean ShouldArbitrate() {
            return GetValue<System.Boolean>("ShouldArbitrate");
        }
        public System.Boolean ShouldUseSpikeStrips() {
            return GetValue<System.Boolean>("ShouldUseSpikeStrips");
        }
        public System.Boolean ShowFlasher() {
            return GetValue<System.Boolean>("ShowFlasher");
        }
        public VaultLib.CodeGen.RefSpecWrapper SkillModCategory() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("SkillModCategory");
        }
        public System.Single SkillModEffectAmount() {
            return GetValue<System.Single>("SkillModEffectAmount");
        }
        // unknown type: Victory::Data::Objects::Customization::SkillModEffectAmountConversion
        public VaultLib.Core.Types.VLTUnknown SkillModEffectAmountImperialConversion() {
            return GetValue<VaultLib.Core.Types.VLTUnknown>("SkillModEffectAmountImperialConversion");
        }
        public VaultLib.Support.World.VLT.GameCore.EventType SkillModEffectEventMode() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.EventType>("SkillModEffectEventMode");
        }
        public System.Single SkillModEffectMaxAmount() {
            return GetValue<System.Single>("SkillModEffectMaxAmount");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> SkillModEffects() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("SkillModEffects");
        }
        public VaultLib.CodeGen.RefSpecWrapper SkillModEffectType() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("SkillModEffectType");
        }
        public System.Boolean SkillModEffectTypeAmountDisplay() {
            return GetValue<System.Boolean>("SkillModEffectTypeAmountDisplay");
        }
        public System.Boolean SkillModEffectTypeDisplay() {
            return GetValue<System.Boolean>("SkillModEffectTypeDisplay");
        }
        // unknown type: Victory::Data::Objects::Customization::SkillModEffectType
        public VaultLib.Core.Types.VLTUnknown SkillModEffectTypeId() {
            return GetValue<VaultLib.Core.Types.VLTUnknown>("SkillModEffectTypeId");
        }
        public System.Int16 SkillModPartQuality() {
            return GetValue<System.Int16>("SkillModPartQuality");
        }
        public List<VaultLib.CodeGen.RefSpecWrapper> SpawnLocation() {
            return GetArray<VaultLib.CodeGen.RefSpecWrapper>("SpawnLocation");
        }
        public VaultLib.CodeGen.RefSpecWrapper SpawnPoint() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("SpawnPoint");
        }
        public VaultLib.Support.World.VLT.GameCore.StringKey SpectateMethod() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.StringKey>("SpectateMethod");
        }
        public System.Single SpectateTime() {
            return GetValue<System.Single>("SpectateTime");
        }
        public System.Int64 StartDateTime() {
            return GetValue<System.Int64>("StartDateTime");
        }
        public VaultLib.CodeGen.RefSpecWrapper StartGrid() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("StartGrid");
        }
        public List<System.Single> StartGridExtraLaneOffset() {
            return GetArray<System.Single>("StartGridExtraLaneOffset");
        }
        public System.Boolean StartGridIsStaggered() {
            return GetValue<System.Boolean>("StartGridIsStaggered");
        }
        public System.Single StartGridLatOffset() {
            return GetValue<System.Single>("StartGridLatOffset");
        }
        public System.Single StartGridLatSpacing() {
            return GetValue<System.Single>("StartGridLatSpacing");
        }
        public System.Single StartGridLongSpacing() {
            return GetValue<System.Single>("StartGridLongSpacing");
        }
        public System.UInt32 StartGridWidth() {
            return GetValue<System.UInt32>("StartGridWidth");
        }
        public System.Single StartTimeInSeconds() {
            return GetValue<System.Single>("StartTimeInSeconds");
        }
        public System.Int32 StrikeCount() {
            return GetValue<System.Int32>("StrikeCount");
        }
        public VaultLib.CodeGen.RefSpecWrapper TargetActivity() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("TargetActivity");
        }
        public System.Boolean Template() {
            return GetValue<System.Boolean>("Template");
        }
        public System.Int32 Tier() {
            return GetValue<System.Int32>("Tier");
        }
        public System.Single TimeLimit() {
            return GetValue<System.Single>("TimeLimit");
        }
        public System.Single TimeLimitWarning() {
            return GetValue<System.Single>("TimeLimitWarning");
        }
        public System.Single TopSpeed() {
            return GetValue<System.Single>("TopSpeed");
        }
        public VaultLib.CodeGen.RefSpecWrapper TrackLayout() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("TrackLayout");
        }
        public System.Single TrackLength() {
            return GetValue<System.Single>("TrackLength");
        }
        public System.String TrackMap() {
            return GetValue<System.String>("TrackMap");
        }
        public System.UInt16 TrafficDensity() {
            return GetValue<System.UInt16>("TrafficDensity");
        }
        public System.Boolean UseMatchRatings() {
            return GetValue<System.Boolean>("UseMatchRatings");
        }
        public System.Int32 Value() {
            return GetValue<System.Int32>("Value");
        }
        public System.Single Value1() {
            return GetValue<System.Single>("Value1");
        }
        public System.Single Value2() {
            return GetValue<System.Single>("Value2");
        }
        public VaultLib.Support.World.VLT.GameCore.StringKey VehicleKey() {
            return GetValue<VaultLib.Support.World.VLT.GameCore.StringKey>("VehicleKey");
        }
        public List<VaultLib.Support.World.VLT.GameCore.StringKey> Vehicles() {
            return GetArray<VaultLib.Support.World.VLT.GameCore.StringKey>("Vehicles");
        }
        public System.Single Width() {
            return GetValue<System.Single>("Width");
        }
        public System.UInt32 ZoneId() {
            return GetValue<System.UInt32>("ZoneId");
        }
        #endregion

    }
}
