using System.Collections.Generic;
using VaultLib.CodeGen;
using VaultLib.Core.Data;

// Generated by VaultLib.CodeGen @ November 30, 2019 4:47:29 AM for game WORLD
namespace SBRW.GameServer.Attrib.Gen
{
    public class WORLD_engineaudio : CollectionWrapperBase {
        #region Field Names
        public const string Name_AEMSMix_L_RPM = "AEMSMix_L_RPM";
        public const string Name_BankName_auxRAM = "BankName_auxRAM";
        public const string Name_PhysicsRPM_Map = "PhysicsRPM_Map";
        public const string Name_CarID = "CarID";
        public const string Name_RPM_CrossFade_Points = "RPM_CrossFade_Points";
        public const string Name_DECEL_AEMSVol = "DECEL_AEMSVol";
        public const string Name_GINSU_DECEL_FADE_OUT = "GINSU_DECEL_FADE_OUT";
        public const string Name_EngType = "EngType";
        public const string Name_Filename_GinsuAccel = "Filename_GinsuAccel";
        public const string Name_BankName_mainRAM = "BankName_mainRAM";
        public const string Name_DecelPitchOffset = "DecelPitchOffset";
        public const string Name_Vol_ShiftSweets = "Vol_ShiftSweets";
        public const string Name_Ginsu_ACL_Neg_S_RPM = "Ginsu_ACL_Neg_S_RPM";
        public const string Name_GinsuDecelVol = "GinsuDecelVol";
        public const string Name_Filename_GinsuDecel = "Filename_GinsuDecel";
        public const string Name_MinRPM = "MinRPM";
        public const string Name_AccelDeltaRPMThreshold = "AccelDeltaRPMThreshold";
        public const string Name_DECEL_AEMSMix_S_RPM = "DECEL_AEMSMix_S_RPM";
        public const string Name_GINSU_Decel_MaxRPM = "GINSU_Decel_MaxRPM";
        public const string Name_DECEL_GINSUMix_L_RPM = "DECEL_GINSUMix_L_RPM";
        public const string Name_GINSU_DECEL_FADE_IN = "GINSU_DECEL_FADE_IN";
        public const string Name_RPM_Range_Setting = "RPM_Range_Setting";
        public const string Name_DecelDeltaRPMThreshold = "DecelDeltaRPMThreshold";
        public const string Name_MaybeV8 = "MaybeV8";
        public const string Name_ENGLoopVolumes = "ENGLoopVolumes";
        public const string Name_Ginsu_ACL_Neg_L_RPM = "Ginsu_ACL_Neg_L_RPM";
        public const string Name_DECEL_GINSUMix_S_RPM = "DECEL_GINSUMix_S_RPM";
        public const string Name_ExhaustRef = "ExhaustRef";
        public const string Name_Tranny = "Tranny";
        public const string Name_DECEL_AEMSMix_L_RPM = "DECEL_AEMSMix_L_RPM";
        public const string Name_AEMSVol = "AEMSVol";
        public const string Name_CollectionName = "CollectionName";
        public const string Name_AEMSMix_S_RPM = "AEMSMix_S_RPM";
        public const string Name_MaxRPM = "MaxRPM";
        public const string Name_Priority = "Priority";
        public const string Name_Vol_Sputters = "Vol_Sputters";
        public const string Name_GINSUMix_S_RPM = "GINSUMix_S_RPM";
        public const string Name_GINSUAccelVol = "GINSUAccelVol";
        public const string Name_GINSU_Decel_MinRPM = "GINSU_Decel_MinRPM";
        public const string Name_GINSUMix_L_RPM = "GINSUMix_L_RPM";
        public const string Name_GINSU_LowPassCutoff = "GINSU_LowPassCutoff";
        public const string Name_Master_Vol = "Master_Vol";
        public const string Name_SweetBank = "SweetBank";
        public const string Name_acceltrans = "acceltrans";
        #endregion

        public WORLD_engineaudio(VLTCollection collection) : base(collection) {}

        #region Getters
        public System.Single AccelDeltaRPMThreshold() {
            return GetValue<System.Single>("AccelDeltaRPMThreshold");
        }
        public VaultLib.CodeGen.RefSpecWrapper acceltrans() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("acceltrans");
        }
        public System.Single AEMSMix_L_RPM() {
            return GetValue<System.Single>("AEMSMix_L_RPM");
        }
        public System.Single AEMSMix_S_RPM() {
            return GetValue<System.Single>("AEMSMix_S_RPM");
        }
        public System.UInt32 AEMSVol() {
            return GetValue<System.UInt32>("AEMSVol");
        }
        public List<VaultLib.ModernBase.StringKey> BankName_auxRAM() {
            return GetArray<VaultLib.ModernBase.StringKey>("BankName_auxRAM");
        }
        public VaultLib.ModernBase.StringKey BankName_mainRAM() {
            return GetValue<VaultLib.ModernBase.StringKey>("BankName_mainRAM");
        }
        public System.UInt32 CarID() {
            return GetValue<System.UInt32>("CarID");
        }
        public System.String CollectionName() {
            return GetValue<System.String>("CollectionName");
        }
        public System.Single DECEL_AEMSMix_L_RPM() {
            return GetValue<System.Single>("DECEL_AEMSMix_L_RPM");
        }
        public System.Single DECEL_AEMSMix_S_RPM() {
            return GetValue<System.Single>("DECEL_AEMSMix_S_RPM");
        }
        public System.UInt32 DECEL_AEMSVol() {
            return GetValue<System.UInt32>("DECEL_AEMSVol");
        }
        public System.Single DECEL_GINSUMix_L_RPM() {
            return GetValue<System.Single>("DECEL_GINSUMix_L_RPM");
        }
        public System.Single DECEL_GINSUMix_S_RPM() {
            return GetValue<System.Single>("DECEL_GINSUMix_S_RPM");
        }
        public System.Single DecelDeltaRPMThreshold() {
            return GetValue<System.Single>("DecelDeltaRPMThreshold");
        }
        public System.Single DecelPitchOffset() {
            return GetValue<System.Single>("DecelPitchOffset");
        }
        public VaultLib.Support.World.VLT.AUDENGLOOPVOLUMESst ENGLoopVolumes() {
            return GetValue<VaultLib.Support.World.VLT.AUDENGLOOPVOLUMESst>("ENGLoopVolumes");
        }
        public VaultLib.Support.World.VLT.eENGINE_GROUP EngType() {
            return GetValue<VaultLib.Support.World.VLT.eENGINE_GROUP>("EngType");
        }
        public VaultLib.CodeGen.RefSpecWrapper ExhaustRef() {
            return GetValue<VaultLib.CodeGen.RefSpecWrapper>("ExhaustRef");
        }
        public VaultLib.ModernBase.StringKey Filename_GinsuAccel() {
            return GetValue<VaultLib.ModernBase.StringKey>("Filename_GinsuAccel");
        }
        public VaultLib.ModernBase.StringKey Filename_GinsuDecel() {
            return GetValue<VaultLib.ModernBase.StringKey>("Filename_GinsuDecel");
        }
        public System.Single Ginsu_ACL_Neg_L_RPM() {
            return GetValue<System.Single>("Ginsu_ACL_Neg_L_RPM");
        }
        public System.Single Ginsu_ACL_Neg_S_RPM() {
            return GetValue<System.Single>("Ginsu_ACL_Neg_S_RPM");
        }
        public System.Single GINSU_DECEL_FADE_IN() {
            return GetValue<System.Single>("GINSU_DECEL_FADE_IN");
        }
        public System.Single GINSU_DECEL_FADE_OUT() {
            return GetValue<System.Single>("GINSU_DECEL_FADE_OUT");
        }
        public System.UInt32 GINSU_Decel_MaxRPM() {
            return GetValue<System.UInt32>("GINSU_Decel_MaxRPM");
        }
        public System.UInt32 GINSU_Decel_MinRPM() {
            return GetValue<System.UInt32>("GINSU_Decel_MinRPM");
        }
        public System.UInt32 GINSU_LowPassCutoff() {
            return GetValue<System.UInt32>("GINSU_LowPassCutoff");
        }
        public System.UInt32 GINSUAccelVol() {
            return GetValue<System.UInt32>("GINSUAccelVol");
        }
        public System.UInt32 GinsuDecelVol() {
            return GetValue<System.UInt32>("GinsuDecelVol");
        }
        public System.Single GINSUMix_L_RPM() {
            return GetValue<System.Single>("GINSUMix_L_RPM");
        }
        public System.Single GINSUMix_S_RPM() {
            return GetValue<System.Single>("GINSUMix_S_RPM");
        }
        public System.UInt16 Master_Vol() {
            return GetValue<System.UInt16>("Master_Vol");
        }
        public System.Single MaxRPM() {
            return GetValue<System.Single>("MaxRPM");
        }
        public System.Boolean MaybeV8() {
            return GetValue<System.Boolean>("MaybeV8");
        }
        public System.Single MinRPM() {
            return GetValue<System.Single>("MinRPM");
        }
        public VaultLib.Core.Types.Attrib.Types.Matrix PhysicsRPM_Map() {
            return GetValue<VaultLib.Core.Types.Attrib.Types.Matrix>("PhysicsRPM_Map");
        }
        public System.Single Priority() {
            return GetValue<System.Single>("Priority");
        }
        public VaultLib.Support.World.VLT.RPMLOOPPOINTSst RPM_CrossFade_Points() {
            return GetValue<VaultLib.Support.World.VLT.RPMLOOPPOINTSst>("RPM_CrossFade_Points");
        }
        public VaultLib.Support.World.VLT.AUDENGRPMRANGEst RPM_Range_Setting() {
            return GetValue<VaultLib.Support.World.VLT.AUDENGRPMRANGEst>("RPM_Range_Setting");
        }
        public List<VaultLib.ModernBase.StringKey> SweetBank() {
            return GetArray<VaultLib.ModernBase.StringKey>("SweetBank");
        }
        public System.Boolean Tranny() {
            return GetValue<System.Boolean>("Tranny");
        }
        public System.Int32 Vol_ShiftSweets() {
            return GetValue<System.Int32>("Vol_ShiftSweets");
        }
        public System.Int32 Vol_Sputters() {
            return GetValue<System.Int32>("Vol_Sputters");
        }
        #endregion

    }
}
